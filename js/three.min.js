/*! three.min.js - Three.js r132 - https://threejs.org/ */
(function(global, factory) {
  if (typeof exports === 'object' && typeof module !== 'undefined') {
    factory(exports);
  } else if (typeof define === 'function' && define.amd) {
    define(['exports'], factory);
  } else {
    factory((global = typeof globalThis !== 'undefined' ? globalThis : global || self).THREE = {});
  }
})(this, function(exports) {
  'use strict';

  var constants = Object.freeze({
    __proto__: null,
    REVISION: '132',
    MOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 },
    TOUCH: { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }
  });

  var globalScope = (function() {
    if (typeof window !== 'undefined') return window;
    if (typeof self !== 'undefined') return self;
    if (typeof global !== 'undefined') return global;
    return {};
  })();

  var uniqueId = 0;

  function once(fn) {
    var called = false;
    return function() {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    };
  }

  function lerp(start, end, alpha) {
    alpha = Math.max(0, Math.min(1, alpha));
    return start + alpha * (end - start);
  }

  exports.constants = constants;
  exports.globalScope = globalScope;
  exports.uniqueId = uniqueId;
  exports.once = once;
  exports.lerp = lerp;
});