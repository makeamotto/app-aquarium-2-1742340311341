```javascript
// Initialize scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Create aquarium boundaries
const aquariumGeometry = new THREE.BoxGeometry(10, 5, 5);
const aquariumMaterial = new THREE.MeshBasicMaterial({ color: 0x00aaff, wireframe: true });
const aquarium = new THREE.Mesh(aquariumGeometry, aquariumMaterial);
scene.add(aquarium);

// Fish class
class Fish {
    constructor(size, color) {
        this.size = size;
        this.color = color;
        this.geometry = new THREE.SphereGeometry(size, 32, 32);
        this.material = new THREE.MeshBasicMaterial({ color: color });
        this.mesh = new THREE.Mesh(this.geometry, this.material);
        this.mesh.position.set(
            (Math.random() - 0.5) * 8,
            (Math.random() - 0.5) * 4,
            (Math.random() - 0.5) * 4
        );
        scene.add(this.mesh);
    }

    move() {
        this.mesh.position.x += (Math.random() - 0.5) * 0.1;
        this.mesh.position.y += (Math.random() - 0.5) * 0.1;
        this.mesh.position.z += (Math.random() - 0.5) * 0.1;
    }

    grow() {
        this.size += 0.1;
        this.mesh.scale.set(this.size, this.size, this.size);
    }
}

// Create fish
const fishes = Array.from({ length: 10 }, () => {
    const size = Math.random() * 0.5 + 0.1;
    const color = Math.random() * 0xffffff;
    return new Fish(size, color);
});

// Animation loop
function animate() {
    requestAnimationFrame(animate);

    // Move fish
    fishes.forEach(fish => fish.move());

    // Check for collisions and eating
    for (let i = 0; i < fishes.length; i++) {
        for (let j = i + 1; j < fishes.length; j++) {
            const fish1 = fishes[i];
            const fish2 = fishes[j];
            const distance = fish1.mesh.position.distanceTo(fish2.mesh.position);
            if (distance < fish1.size + fish2.size) {
                if (fish1.size > fish2.size) {
                    fish1.grow();
                    scene.remove(fish2.mesh);
                    fishes.splice(j, 1);
                    j--;
                } else if (fish2.size > fish1.size) {
                    fish2.grow();
                    scene.remove(fish1.mesh);
                    fishes.splice(i, 1);
                    i--;
                    break;
                }
            }
        }
    }

    renderer.render(scene, camera);
}

camera.position.z = 10;
animate();
```